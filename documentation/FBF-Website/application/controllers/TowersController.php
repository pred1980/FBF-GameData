<?phprequire_once 'Zend/Controller/Action.php';class TowersController extends Zend_Controller_Action{    public function init()    {        $this->view->towers = $this->_getTower('common', 1);                //add css        $this->view->headLink()->appendStylesheet($this->view->baseUrl().'/files/frontend/css/towers.css');                //add js        $this->view->headScript()->appendFile($this->view->baseUrl().'/files/frontend/js/jScrollbar.jquery.js', 'text/javascript');        $this->view->headScript()->appendFile($this->view->baseUrl().'/files/frontend/js/jquery-ui-1.8.16.custom.min.js', 'text/javascript');        $this->view->headScript()->appendFile($this->view->baseUrl().'/files/frontend/js/jquery-mousewheel.js', 'text/javascript');        $this->view->headScript()->appendFile($this->view->baseUrl().'/files/frontend/js/towers.js', 'text/javascript');    }        public function indexAction ()    {        //set Title        $this->view->headTitle('FBF Towers');                //set keywords for the heroes site        $this->view->placeholder('keywords')->set("FBF towers, towers of FBF, Forsaken Bastion's Fall");                   //set description for the heroes site        $this->view->placeholder('description')->set("FBF Towers - With the FBF Towers you provide extra defense while you're waiting for the great rush. You cannot defend the undead land with your army all of the time.");            //Facebook        $this->view->placeholder('fb-summary')->set("FBF Towers - With the FBF Towers you provide extra defense while you're waiting for the great rush. You cannot defend the undead land with your army all of the time.");        $this->view->placeholder('fb-image')->set(urlencode($this->view->serverUrl().'/files/frontend/img/enUS/misc/facebook-towers.jpg'));    }        public function towerinformationAction()    {    	// Rendern deaktivieren    	$this->_helper->layout->disableLayout();    	$this->_helper->viewRenderer->setNoRender(true);        	$params = $this->getAllParams();    	//$params = $this->getRequest()->getParams();        	$type     = $params['type'];    	$ordering = $params['ordering'];    	$towers   = array();        	foreach ($this->_getTower($type, $ordering) as $tower) {    	    $basic = array('towerId'    => $tower->getTowerId(),    	                   'name'       => $tower->getName(),    	                   'image'       => $tower->getImagePath(),    	    			   'lumber'     => $tower->getLumber(),    	    			   'rarity'     => $tower->getType(),    	    			   'dps'		=> $tower->getDps(),    	    			   'damage'		=> $tower->getDamage(),    	    			   'cooldown'   => $tower->getCoolDown(),    	    			   'range'      => $tower->getRange(),    	    			   'desc'		=> $tower->getDescription(),    	    			   'logVersion' => $tower->getLatestChangeLog(),    	    			   'log'        => $tower->getChangeLogForVersion($tower->getLatestChangeLog()));    	    $spells = array();    	    $spellObjects = $tower->getSpells();    	    foreach ($spellObjects as $spellId => $oneSpell) {    	      	$spells[] = array('icon' => $oneSpell->getIconPath(),		  	        			  'name' => $oneSpell->getName(),	    	        			  'desc' => $oneSpell->getDescription());   	        }    	    $basic['spells'] = $spells;    	    $towers[] = $basic;    	}    	    	echo json_encode($towers);    }        protected function _getTower($type, $ordering)    {        $towerClass = new Class_Tower();        $tower = $towerClass->getTower($type, $ordering);        $viewTowers = array($tower);                $workingTower = $tower;                while($workingTower->hasNextLevel()) {        	$workingTower = $workingTower->getNextLevelTower();        	$viewTowers[] = $workingTower;        }                return $viewTowers;    }}